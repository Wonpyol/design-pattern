스트래티지 패턴이란 - 행위패턴
1. 행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 패턴
    - 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴

2. 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다.
    - 전략이란? 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등

3. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.

역할이 수행하는 작업
1.Strategy
    - 인터페이스나 추상 클래스로 외부에서 동일한 방식으로 알고리즘을 호출하는 방법을 명시
2. ConcreteStrategy :스트래티지 패턴에서 명시한 알고리즘을 실제로 구현한 클래스
    - Context스트래티지 패턴을 이용하는 역할을 수행한다.
    -필요에 따라 동적으로 구체적인 전략을 바꿀 수 있도록 setter 메서드(‘집약 관계’)를 제공한다.
집약 관계
1. 참조값을 인자로 받아 필드를 세팅하는 경우
2. 전체 객체의 라이프타임과 부분 객체의 라이프 타임은 독립적이다.
3. 즉, 전체 객체가 메모리에서 사라진다 해도 부분 객체는 사라지지 않는다.

(문제 해결) 무엇이 변화되었는지 찾은 후에 이를 클래스로 캡슐화해야 한다.
1. 로봇 예제에서 변화되면서 문제를 발생시키는 요인은 로봇의 이동 방식과 공격 방식의 변화 이다.
2. 이를 캡슐화하려면 외부에서 구체적인 이동 방식과 공격 방식을 담은 구체적인 클래스들을 은닉해야 한다.
    - 공격과 이동을 위한 인터페이스를 각각 만들고 이들을 실제 실현한 클래스를 만들어야 한다.
    - Robot 클래스가 이동 기능과 공격 기능을 이용하는 클라이언트 역할을 수행
        ㅇ 구체적인 이동, 공격 방식이 MovingStrategy와 AttackStrategy 인터페이스에 의해 캡슐화되어 있다.
        ㅇ 이 인터페이스들이 일종의 방화벽 역할을 수행해 Robot 클래스의 변경을 차단해준다.

    - 스트래티지 패턴을 이용하면 새로운 기능의 추가(새로운 이동, 공격 기능)가 기존의 코드에 영향을 미치지 못하게 하므로 OCP를 만족 하는 설계가 된다.
        ㅇ 이렇게 변경된 새로운 구조에서는 외부에서 로봇 객체의 이동, 공격 방식을 임의대로 바꾸도록 해주는 setter 메서드가 필요하다.
        ㅇ setMovingStrategy, setAttackStrategy
        ㅇ 이렇게 변경이 가능한 이유는 상속 대신 ‘집약 관계’를 이용했기 때문이다