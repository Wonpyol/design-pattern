컴퍼지트 패턴이란 ? - 구조 패턴
1. 여러 개의 객체들로 구성된 복합 객체와 단일 객체를 클라이언트에서 구별 없이 다루게 해주는 패턴
2. 전체-부분의 관계(Ex. Directory-File)를 갖는 객체들 사이의 관계를 정의할 때 유용하다.
2. 클라이언트는 전체와 부분을 구분하지 않고 동일한 인터페이스 를 사용할 수 있다.

역할이 수행하는 작업
1. Component
    - 구체적인 부분
    - Leaf 클래스와 전체에 해당하는 Composite 클래스에 공통 인터페이스를 정의
2. Leaf
    - 구체적인 부분 클래스
    - Composite 객체의 부품으로 설정
3. Composite
    - 전체 클래스
    - 복수 개의 Component를 갖도록 정의
    - 복수 개의 Leaf, 심지어 복수 개의 Composite 객체를 부분으로 가질 수 있음

합성 관계
1. 생성자에서 필드에 대한 객체를 생성하는 경우
2. 전체 객체의 라이프타임과 부분 객체의 라이프 타임은 의존적이다.
3. 즉, 전체 객체(마름모가 표시된 클래스)가 없어지면 부분 객체도 없어진다.

